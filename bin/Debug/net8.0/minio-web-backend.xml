<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MinioWebApi</name>
    </assembly>
    <members>
        <member name="M:AuthController.Register(RegisterRequest)">
            <summary>
            用户注册（仅管理员可操作）
            </summary>
            <remarks>
            功能：
            - 管理员创建新用户账号
            - 密码会被加密存储
            - 注册成功后用户状态为“启用”
            
            示例请求 JSON：
            ```json
            {
              "username": "test_user_001",
              "password": "Test@123456",
              "role": "User"
            }
            ```
            </remarks>
            <param name="request">注册请求参数（JSON 格式，从请求体获取）</param>
            <returns>
            成功响应（200 OK）：
            ```json
            {
              "id": 1001,
              "username": "test_user_001",
              "role": "User",
              "message": "注册成功",
              "createdAt": "2023-10-01T10:30:00"
            }
            ```
            失败响应（400 Bad Request）：
            ```json
            {
              "error": "用户名已存在"
            }
            ```
            无权限响应（403 Forbidden）：
            ```json
            {
              "error": "仅管理员可执行此操作"
            }
            ```
            </returns>
            <response code="200">注册成功，返回用户基础信息</response>
            <response code="400">参数无效或业务校验失败（如用户名重复）</response>
            <response code="401">未登录（无有效 Token）</response>
            <response code="403">已登录但非管理员角色</response>
        </member>
        <member name="M:AuthController.Login(LoginRequest)">
            <summary>
            用户登录
            </summary>
            <remarks>
            功能说明：验证用户凭据并生成访问令牌
            
            示例请求：
            ```json
            {
              "username": "testUser",
              "password": "Test@123456"
            }
            ```
            </remarks>
            <param name="request">登录请求参数对象，来源于请求体（FromBody）</param>
            <param name="request.Username.Username">用户名，字符串类型，必填项
            <list type="bullet">
            <item>与注册时填写的用户名一致</item>
            <item>示例值："testUser123"</item>
            </list>
            </param>
            <param name="request.Password.Password">用户密码，字符串类型，必填项
            <list type="bullet">
            <item>与注册时设置的密码一致</item>
            <item>示例值："Test@123456"</item>
            </list>
            </param>
            <returns>
            成功响应（200 OK）：
            ```json
            {
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
              "username": "testUser",
              "role": "User",
              "lastLoginTime": "2023-10-01T14:30:00"
            }
            ```
            
            失败响应（401 Unauthorized）：
            ```json
            {
              "error": "用户名或密码错误"
            }
            ```
            </returns>
            <response code="200">登录成功，返回JWT令牌、用户名、角色和最后登录时间</response>
            <response code="400">请求参数不完整</response>
            <response code="401">用户名或密码错误</response>
        </member>
        <member name="M:AuthController.Logout">
            <summary>
            用户登出（清除登录状态）
            </summary>
            <remarks>
            功能说明：使当前用户的令牌失效，清除登录状态
            
            调用说明：
            - 需要在请求头中携带有效的Authorization令牌
            - 示例请求头：Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            </remarks>
            <returns>
            成功响应（200 OK）：
            ```json
            {
              "message": "退出成功"
            }
            ```
            
            失败响应（401 Unauthorized）：
            ```json
            {
              "error": "未授权访问"
            }
            ```
            </returns>
            <response code="200">登出成功</response>
            <response code="401">未登录状态下调用此接口</response>
        </member>
        <member name="T:RegisterRequest">
            <summary>
            用户注册请求参数模型
            </summary>
        </member>
        <member name="P:RegisterRequest.Username">
            <summary>
            用户名
            </summary>
            <remarks>
            约束：
            - 长度 3-20 字符
            - 仅允许字母、数字、下划线（_）
            - 全局唯一，不可重复
            </remarks>
            <example>test_user_001</example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:RegisterRequest.Password" -->
        <member name="P:RegisterRequest.Role">
            <summary>
            用户角色
            </summary>
            <remarks>
            可选值：
            - "Admin"：管理员（所有权限）
            - "User"：普通用户（默认值，基础权限）
            注意：非管理员调用注册接口时，此参数会被强制设为 "User"
            </remarks>
            <example>User</example>
        </member>
        <member name="M:MinioWebBackend.Controllers.BucketsController.GetBuckets">
            <summary>
            获取所有桶名
            </summary>
        </member>
        <member name="M:MinioWebBackend.Controllers.DownloadByIDController.DownloadById(System.Int32)">
            <summary>
            根据文件 ID 下载文件
            </summary>
            <param name="id">文件的唯一 ID</param>
            <returns>返回文件流，下载成功；找不到文件返回 404</returns>
        </member>
        <member name="M:MinioWebBackend.Controllers.DownloadByIDController.PreviewById(System.Int32)">
            <summary>
            根据文件 ID 预览文件
            </summary>
            <param name="id">文件的唯一 ID</param>
            <returns>返回文件流，Content-Disposition 为 inline，可直接在浏览器预览；找不到文件返回 404</returns>
        </member>
        <member name="M:MinioWebBackend.Controllers.FileDownloadController.BatchDownloadByIds(System.Collections.Generic.List{System.Int32})">
            <summary>
            批量下载文件，返回 ZIP 压缩包
            </summary>
            <param name="ids">文件 ID 列表</param>
        </member>
        <member name="M:MinioWebBackend.Controllers.FileQueryController.GetAllFiles">
            <summary>
            获取所有文件信息
            </summary>
        </member>
        <member name="M:MinioWebBackend.Controllers.FileQueryController.GetFileById(System.Int32)">
            <summary>
            根据文件 ID 获取文件信息
            </summary>
            <param name="id">文件 ID</param>
        </member>
        <member name="M:MinioWebBackend.Controllers.FileQueryController.QueryFiles(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            查询文件（支持分页、时间范围、标签筛选）
            </summary>
            <param name="id">文件 ID</param>
            <param name="uploader">上传者</param>
            <param name="fileName">文件名</param>
            <param name="bucket">桶名</param>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <param name="pageNumber">分页页码</param>
            <param name="pageSize">每页数量</param>
            <param name="tags">标签列表</param>
            <param name="matchAllTags">是否全部匹配标签</param> 
        </member>
        <member name="M:MinioWebBackend.Controllers.FileQueryController.QueryFileIds(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            查询符合条件的文件 ID 列表
            </summary>
            <param name="id">文件 ID</param>
            <param name="uploader">上传者</param>
            <param name="fileName">文件名</param>
            <param name="bucket">桶名</param>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
        </member>
        <member name="M:MinioWebBackend.Controllers.FileUploadController.UploadFile(System.String,MinioWebBackend.Models.FileUploadDto)">
            <summary>
            上传文件
            POST /api/{bucketName}/fileupload/upload
            </summary>
        </member>
        <member name="M:MinioWebBackend.Controllers.LogQueryController.QueryLogs(MinioWebBackend.Dtos.LogDtos.LogQueryRequest)">
            <summary>
            按条件查询日志
            </summary>
        </member>
        <member name="T:MinioWebBackend.Dtos.LogDtos.LogItemDto">
            <summary>
            单条日志DTO
            </summary>
        </member>
        <member name="M:MinioWebBackend.Dtos.LogDtos.LogItemDto.FromEntity(MinioWebBackend.Models.SerilogLog)">
            <summary>
            从数据库实体转换为DTO
            </summary>
        </member>
        <member name="M:MinioWebBackend.Dtos.LogDtos.LogItemDto.ParseLogLevel(System.String)">
            <summary>
            解析日志级别
            </summary>
        </member>
        <member name="M:MinioWebBackend.Dtos.LogDtos.LogItemDto.ParseProperties(System.String)">
            <summary>
            解析Properties JSON
            </summary>
        </member>
        <member name="T:MinioWebBackend.Dtos.LogDtos.LogQueryRequest">
            <summary>
            日志查询请求参数
            </summary>
        </member>
        <member name="P:MinioWebBackend.Dtos.LogDtos.LogQueryRequest.Levels">
            <summary>
            日志级别（可多选：Information/Warning/Error等）
            </summary>
        </member>
        <member name="P:MinioWebBackend.Dtos.LogDtos.LogQueryRequest.MessageKeyword">
            <summary>
            日志消息关键词（模糊匹配）
            </summary>
        </member>
        <member name="P:MinioWebBackend.Dtos.LogDtos.LogQueryRequest.ExceptionKeyword">
            <summary>
            异常信息关键词（模糊匹配）
            </summary>
        </member>
        <member name="P:MinioWebBackend.Dtos.LogDtos.LogQueryRequest.TimestampStart">
            <summary>
            时间戳开始（UTC时间）
            </summary>
        </member>
        <member name="P:MinioWebBackend.Dtos.LogDtos.LogQueryRequest.TimestampEnd">
            <summary>
            时间戳结束（UTC时间）
            </summary>
        </member>
        <member name="P:MinioWebBackend.Dtos.LogDtos.LogQueryRequest.PropertyFilters">
            <summary>
            Properties中的键值过滤（如{"MachineName":"localhost"}）
            </summary>
        </member>
        <member name="P:MinioWebBackend.Dtos.LogDtos.LogQueryRequest.PageIndex">
            <summary>
            分页页码（默认1）
            </summary>
        </member>
        <member name="P:MinioWebBackend.Dtos.LogDtos.LogQueryRequest.PageSize">
            <summary>
            每页条数（默认20，最大100）
            </summary>
        </member>
        <member name="M:MinioWebBackend.Dtos.LogDtos.LogQueryRequest.Validate">
            <summary>
            校验分页参数合法性
            </summary>
        </member>
        <member name="T:MinioWebBackend.Dtos.LogDtos.LogQueryResponse">
            <summary>
            日志查询响应（分页）
            </summary>
        </member>
        <member name="P:MinioWebBackend.Dtos.LogDtos.LogQueryResponse.TotalCount">
            <summary>
            总日志条数
            </summary>
        </member>
        <member name="P:MinioWebBackend.Dtos.LogDtos.LogQueryResponse.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:MinioWebBackend.Dtos.LogDtos.LogQueryResponse.CurrentPage">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:MinioWebBackend.Dtos.LogDtos.LogQueryResponse.Logs">
            <summary>
            当前页日志列表
            </summary>
        </member>
        <member name="M:MinioWebBackend.Interfaces.IAuthService.RegisterAsync(System.String,System.String,System.String)">
            <summary>
            注册用户
            </summary>
        </member>
        <member name="M:MinioWebBackend.Interfaces.IAuthService.LoginAsync(System.String,System.String)">
            <summary>
            用户登录
            </summary>
        </member>
        <member name="M:MinioWebBackend.Interfaces.IAuthService.GenerateJwtToken(MinioWebBackend.Models.User)">
            <summary>
            生成JWT令牌
            </summary>
        </member>
        <member name="M:MinioWebBackend.Interfaces.IAuthService.InitializeAdminAccountAsync">
            <summary>
            初始化管理员账号
            </summary>
        </member>
        <member name="T:MinioWebBackend.Interfaces.ILogQueryService">
            <summary>
            日志查询服务接口
            </summary>
        </member>
        <member name="M:MinioWebBackend.Interfaces.ILogQueryService.QueryLogsAsync(MinioWebBackend.Dtos.LogDtos.LogQueryRequest)">
            <summary>
            按条件查询日志
            </summary>
        </member>
        <member name="P:MinioWebBackend.Models.SerilogLog.Id">
            <summary>
            自增主键（与OperationLogs的Id类型一致）
            </summary>
        </member>
        <member name="P:MinioWebBackend.Models.SerilogLog.Level">
            <summary>
            日志级别（Info/Warn/Error等，对应OperationLogs的OperationType风格）
            </summary>
        </member>
        <member name="P:MinioWebBackend.Models.SerilogLog.Message">
            <summary>
            渲染后的日志消息（对应OperationLogs的Message风格）
            </summary>
        </member>
        <member name="P:MinioWebBackend.Models.SerilogLog.Exception">
            <summary>
            异常信息（ nullable，对应OperationLogs的Message可空场景）
            </summary>
        </member>
        <member name="P:MinioWebBackend.Models.SerilogLog.Properties">
            <summary>
            结构化参数（JSON格式，存储{username}, {bucket}等键值对）
            </summary>
        </member>
        <member name="P:MinioWebBackend.Models.SerilogLog.Timestamp">
            <summary>
            日志时间戳（与OperationLogs的Timestamp类型完全一致：datetime(6)）
            </summary>
        </member>
        <member name="M:MinioWebBackend.Options.HttpContextExtensions.GetUsername(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取当前请求的用户名（从 JWT Claim 或 Identity）
            </summary>
            <param name="context">当前 HttpContext</param>
            <returns>用户名，如果未登录返回 null</returns>
        </member>
        <member name="T:MinioWebBackend.Serilog.EFCoreSink">
            <summary>
            依赖 IServiceScopeFactory 的 Serilog Sink（复用已注册的 AppDbContext）
            </summary>
        </member>
        <member name="T:MinioWebBackend.Serilog.EFCoreSinkExtensions">
            <summary>
            扩展方法：接收 IServiceScopeFactory（与 Sink 构造函数匹配）
            </summary>
        </member>
        <member name="M:MinioWebBackend.Service.AuthService.RegisterAsync(System.String,System.String,System.String)">
            <summary>
            注册用户
            </summary>
        </member>
        <member name="M:MinioWebBackend.Service.AuthService.LoginAsync(System.String,System.String)">
            <summary>
            用户登录（验证密码 + 更新最后登录时间）
            </summary>
        </member>
        <member name="M:MinioWebBackend.Service.AuthService.GenerateJwtToken(MinioWebBackend.Models.User)">
            <summary>
            生成 JWT
            </summary>
        </member>
        <member name="M:MinioWebBackend.Service.AuthService.InitializeAdminAccountAsync">
            <summary>
            初始化管理员账号（仅在管理员账号不存在时创建）
            </summary>
        </member>
        <member name="T:MinioWebBackend.Service.SqlServerJsonFunctions">
            <summary>
            SQL Server JSON_VALUE 映射
            </summary>
        </member>
        <member name="M:MinioWebBackend.Service.UploadService.UploadPartWithRetryAsync(Amazon.S3.Model.UploadPartRequest,System.Int32)">
            <summary>
            上传单个分片到 Amazon S3，包含失败重试机制和超时控制。
            </summary>
            <param name="request">包含分片上传详细信息的 UploadPartRequest 对象。</param>
            <param name="maxRetries">允许的最大重试次数，默认值为 3。</param>
            <returns>
            分片上传成功后返回 UploadPartResponse。
            若超过最大重试次数仍上传失败，则抛出异常。
            </returns>
        </member>
        <member name="M:MinioWebBackend.Service.UploadService.EnsureBucketExistsAsync(System.String)">
            <summary>
            查询bucket是否存在，否则创建新bucket
            </summary>
        </member>
        <member name="M:FileTagController.AddTagsToFile(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            给指定文件添加标签
            </summary>
            <param name="fileId">文件 ID</param>
            <param name="tagIds">标签 ID 列表</param>
        </member>
        <member name="M:FileTagController.GetFilesByTag(System.String)">
            <summary>
            根据单个标签名查询文件
            </summary>
            <param name="tagName">标签名称</param>
        </member>
        <member name="M:FileTagController.GetFilesByTags(System.String[],System.Boolean)">
            <summary>
            根据多个标签名查询文件，可选择匹配所有标签或任意标签
            </summary>
            <param name="tagNames">标签名称数组</param>
            <param name="matchAll">是否匹配所有标签，true=全部匹配，false=任意匹配</param>
        </member>
        <member name="M:FileTagController.GetTagsByFile(System.Int32)">
            <summary>
            获取指定文件的所有标签
            </summary>
            <param name="fileId">文件 ID</param>
        </member>
        <member name="M:TagController.CreateTag(MinioWebBackend.Models.CreateTagDto)">
            <summary>
            创建新标签
            </summary>
            <param name="dto">包含标签名称的 DTO 对象</param>
            <returns>返回创建的标签对象</returns>
        </member>
        <member name="M:TagController.GetAll">
            <summary>
            获取所有标签
            </summary>
            <returns>返回标签列表</returns>
        </member>
        <member name="M:TagController.EditFile(MinioWebBackend.Models.EditFileDto)">
            <summary>
            修改文件信息
            </summary>
            <param name="dto">包含文件修改信息的 DTO 对象</param>
            <returns>返回修改结果</returns>
        </member>
        <member name="T:MinioWebApi.Migrations.AddUserTable">
            <inheritdoc />
        </member>
        <member name="M:MinioWebApi.Migrations.AddUserTable.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:MinioWebApi.Migrations.AddUserTable.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:MinioWebApi.Migrations.AddUserTable.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
